model{

# https://iopscience.iop.org/1748-9326/10/8/084002/media/Rcode_CPA.R

for(i in 1:M){
  for(j in f[i]:l[i]) {
    y[i,j] ~ dnorm(alpha0[i] + alpha1[i]*a[i,j] + eta[j], 1/sd_y[i]/sd_y[i])
  }
 
 alpha0[i] ~ dnorm(0, 0.0001)
 alpha1[i] ~ dnorm(0, 0.0001)T( , 0) # truncated norm
  
  sd_y[i] ~ dt(0, 0.04, 3)T(0, ) # variance differs by core
}

# Non-centered
for(t in 1:Tea) {
  x[t] ~ dnorm(mu_x, 1 / sd_x / sd_x)
  eta[t] ~ dnorm(beta0[J[t] + L[t]] * (x[t] - x_change[L[t]]), 1 / sd_eta / sd_eta) # consider whether eta should be fixed at 0 below a certain x value. 
  J[t] <- step(x[t] - x_change[1])
  L[t] <- 1 + step(x[t] - x_change[2])
}

x_1[1] ~ dunif(x_min, x_max)
x_1[2] ~ dunif(x_min, x_max)
x_change[1:2] <- sort(x_1) # CPs need to be ordered

mu_x ~ dnorm(0, 0.0001)
sd_x ~ dt(0, 0.04, 3)T(0, )
  beta0[1] <- -1000 # force to zero? maybe not if out of range of observed data
  beta0[2] ~ dnorm(0, 0.0001)
  beta0[3] ~ dnorm(0, 0.0001)
  sd_eta ~ dt(0, 0.04, 3)T(0, )

}