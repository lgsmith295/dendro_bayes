model{

for(i in 1:M){
  for(j in f[i]:l[i]) {
    y[i,j] ~ dnorm(alpha0[i, j] + eta[j], 1/sd_y[i]/sd_y[i])
    for(k in 1:K) {
      foo[j, k, i] <- beta[k, i] * B[k, j, i]
    }
    alpha0[i, j] <- sum(foo[j, 1:K, i])
    # alpha0[i, j] <- B[j, 1:K, i] %*% beta[1:K, i] # need to have separate matrices to use the matrix multiplication - or need to write out the matrix multiplication within another loop with K and then sum within the appropriate loop - or maybe zero trick to get correct dimensions
  }
  sd_y[i] ~ dt(0, 0.04, 3)T(0, ) # variance differs by tree
   beta[1:K, i] ~ dmnorm(beta.0[1:K, 1] + beta.00[i], lambda[i]*Q[1:K, 1:K])
   
       gamma_dt[1:K, i] <- beta[1:K, i] - beta.00[i]
        beta.00[i] ~ dnorm(0, 1e-6) # make hierarchical with partial pooling by tree?
        lambda[i] ~ dgamma(0.001, 0.001) # one for all trees or partially pooled hierarchical random effect?
    
        tau.y[i] ~ dgamma(0.001, 0.001)
        
 #   for (j in f[i]:l[i]){
#      y_rep[i,j] ~ dnorm(mu_rep[i,j] + eta[j], tau.y[i])
#      for(k in 1:K) {
 #       bar[j, k, i] <- gamma_dt[k, i] * B_pred[k, j, i]
  #    }
  #    mu_rep[i,j] = sum(bar[j, 1:K, i]) + beta.00[i]
  #  }
 }

  for(k in 1:K) {
    beta.0[k, 1] ~ dnorm(0, 0.0001) # replace the 1 with an index by tree i?
  }

# Non-centered
  for(t in 1:Tea) {
    x[t] ~ dnorm(mu_x, 1 / sd_x / sd_x)
    eta[t] ~ dnorm(beta0 * x[t], 1 / sd_eta / sd_eta)
  }

mu_x ~ dnorm(0, 0.0001)
sd_x ~ dt(0, 0.04, 3)T(0, )
beta0 ~ dnorm(0, 0.0001)
sd_eta ~ dt(0, 0.04, 3)T(0, )

}
