model{

for(i in 1:M){
  for(j in f[i]:l[i]) {
    y[i,j] ~ dnorm(alpha0[i, j] + eta[j], 1/sd_y[i]/sd_y[i])
    for(k in 1:K) {
      foo[j, k, i] <- beta[k, i] * B[k, j, i]
    }
    alpha0[i, j] <- sum(foo[j, 1:K, i])
  }
  sd_y[i] ~ dt(0, 0.04, 3)T(0, ) # variance differs by tree
  beta[1:K, i] ~ dmnorm(beta.0[1:K, 1] + beta.00[i], lambda[i]*Q[1:K, 1:K])
   
  # gamma_dt[1:K, i] <- beta[1:K, i] - beta.00[i]
  beta.00[i] ~ dnorm(0, 1e-6) # make hierarchical with partial pooling by tree?
  lambda[i] ~ dgamma(0.001, 0.001) # one for all trees or partially pooled hierarchical random effect?
    
  tau.y[i] ~ dgamma(0.001, 0.001)

}

  for(k in 1:K) {
    beta.0[k, 1] ~ dnorm(0, 0.0001) # not sure what the 1 is for currently
  }

# Climate Model - cubic spline
alpha_t <- B_c %*% gamma

for(t in 1:Tea) {
  x[t] ~ dnorm(alpha_t[t], 1 / sd_x / sd_x) #T(0, )
  eta[t] ~ dnorm(beta0 * x[t], 1 / sd_eta / sd_eta)
}

for(h in 1:H){
  gamma[h] ~ dnorm(0, 1 / sd_g / sd_g) # dnorm(mu_gamma, 1 / sd_g / sd_g) # assumes independence maybe should make multivariate norm to have lambda2 * Q2 for the covariance
}

mu_gamma ~ dnorm(0, 0.00001)
sd_g ~ dt(0, 0.04, 3)T(0, )

sd_x ~ dt(0, 0.04, 3)T(0, )
beta0 ~ dnorm(0, 0.0001)
sd_eta ~ dt(0, 0.04, 3)T(0, )

}
